{"version":3,"sources":["redux/ActionTypes.js","redux/urlAPI.js","redux/ActionCreators.js","components/users/SingleUserComponent.js","components/users/Users.js","components/posts/SInglePostComponent.js","components/posts/DetailedUserComponent.js","components/posts/Posts.js","components/post/DetailedPostComponent.js","components/post/SIngleCommentComponent.js","components/post/Post.js","components/MainComponent.js","redux/reducers/posts.js","redux/reducers/users.js","redux/reducers/comments.js","redux/reducers/singleUser.js","redux/reducers/singlePost.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["LOAD_USERS","USERS_FAILED","LOAD_SINGLE_USER","SINGLE_USER_FAILED","LOAD_POSTS","POSTS_FAILED","LOAD_SINGLE_POST","SINGLE_POST_FAILED","ADD_POST","LOAD_COMMENTS","COMMENTS_FAILED","urlAPI","fetchUsers","dispatch","fetch","then","response","ok","error","Error","status","statusText","errorMessage","json","users","type","ActionTypes","payload","loadUsers","catch","usersFailed","message","fetchSingleUser","id","user","loadSingleUser","singleUserFailed","loadSinglePost","post","fetchSinglePost","singlePostFailed","fetchPosts","posts","loadPosts","postsFailed","fetchAddPost","userId","title","body","newPost","method","JSON","stringify","headers","console","log","alert","commentsFailed","fetchComments","comments","loadComments","SingleUserComponent","props","websiteUrl","website","pathUrl","className","username","name","email","address","city","phone","href","to","Button","outline","color","withRouter","connect","state","useEffect","allUsers","map","el","RenderUsers","SinglePostComponent","Row","DetailedUserComponent","street","company","singleUser","addPost","useState","isModalOpen","setIsModalOpen","toogleModal","prev","match","params","allPosts","RenderPosts","RenderDetailedUser","onClick","Modal","isOpen","toggle","ModalHeader","ModalBody","onSubmit","values","header","handleSubmit","Label","text","model","placeholder","htmlFor","textarea","rows","DetailedPostComponent","dropdownOpen","setOpen","urlPath","ButtonDropdown","DropdownToggle","caret","class","DropdownMenu","DropdownItem","toggleModalEdit","deletePost","SingleCommentComponent","comment","singlePost","fetchUpdatePost","newComment","fetchDeletePost","currentPost","setCurrentPost","modalEdit","setModalEdit","postId","elem","allComments","RenderComments","RenderDetailedPost","value","onChange","event","target","MainComponent","exact","path","component","Posts","action","concat","Users","Comments","SingleUser","SinglePost","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb82a04.chunk.js","sourcesContent":["export const LOAD_USERS = 'LOAD_USERS';\r\nexport const USERS_FAILED = 'USERS_FAILED';\r\nexport const LOAD_SINGLE_USER = 'LOAD_SINGLE_USER';\r\nexport const SINGLE_USER_FAILED = 'SINGLE_USER_FAILED';\r\n\r\nexport const LOAD_POSTS = 'LOAD_POSTS';\r\nexport const POSTS_FAILED = 'POSTS_FAILED';\r\nexport const LOAD_SINGLE_POST = 'LOAD_SINGLE_POST';\r\nexport const SINGLE_POST_FAILED = 'SINGLE_POST_FAILED';\r\nexport const ADD_POST = 'ADD_POST';\r\n\r\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\r\nexport const COMMENTS_FAILED = 'COMMENTS_FAILED';\r\n\r\nexport const EDIT_POST = 'EDIT_POST';\r\nexport const EDIT_POST_FAILED = 'EDIT_POST_FAILED';\r\nexport const DELETE_POST = 'DELETE_POST';","export const urlAPI = 'https://jsonplaceholder.typicode.com'","import * as ActionTypes from './ActionTypes';\r\nimport { urlAPI } from './urlAPI';\r\n\r\n//Users actions\r\nexport const loadUsers = users => ({\r\n    type: ActionTypes.LOAD_USERS,\r\n    payload: users\r\n});\r\n\r\nexport const usersFailed = error => ({\r\n    type: ActionTypes.USERS_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const fetchUsers = () => dispatch => {\r\n    return fetch(`${urlAPI}/users`)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(users => dispatch(loadUsers(users)))\r\n        .catch(error => dispatch(usersFailed(error.message)))\r\n}\r\n\r\nexport const loadSingleUser = user => ({\r\n    type: ActionTypes.LOAD_SINGLE_USER,\r\n    payload: user\r\n})\r\n\r\nexport const singleUserFailed = error => ({\r\n    type: ActionTypes.SINGLE_USER_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const fetchSingleUser = id => dispatch => {\r\n    return fetch(`${urlAPI}/users/${id}`)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => dispatch(loadSingleUser(user)))\r\n        .catch(error => dispatch(singleUserFailed(error.message)))\r\n}\r\n\r\n//Posts actions\r\nexport const loadSinglePost = post =>({\r\n    type: ActionTypes.LOAD_SINGLE_POST,\r\n    payload: post\r\n})\r\n\r\nexport const singlePostFailed = error => ({\r\n    type: ActionTypes.SINGLE_POST_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const fetchSinglePost = id => dispatch =>{\r\n    return fetch(`${urlAPI}/posts/${id}`)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(post => dispatch(loadSinglePost(post)))\r\n        .catch(error => dispatch(singlePostFailed(error.message)))\r\n}\r\n\r\nexport const fetchUpdatePost = (id, userId, title, body) => dispatch => {\r\n    console.log(id)\r\n    const newComment = {\r\n        id: id,\r\n        userId: userId,\r\n        title: title,\r\n        body: body\r\n    }\r\n\r\n    return fetch(`${urlAPI}/posts/${id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(newComment),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n    })\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(post => dispatch(loadSinglePost(post)))\r\n        .catch(error => dispatch(commentsFailed(error.message)))\r\n}\r\n\r\nexport const fetchDeletePost = (id) => dispatch =>{\r\n    return fetch(`${urlAPI}/posts/${id}`, {\r\n        method: 'DELETE'\r\n    })\r\n}\r\n\r\nexport const loadPosts = posts => ({\r\n    type: ActionTypes.LOAD_POSTS,\r\n    payload: posts\r\n})\r\n\r\nexport const postsFailed = error => ({\r\n    type: ActionTypes.POSTS_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const fetchPosts = (id) => (dispatch) =>{\r\n    return fetch(`${urlAPI}/posts?userId=${id}`)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(posts => dispatch(loadPosts(posts)))\r\n        .catch(error => dispatch(postsFailed(error.message)))\r\n    \r\n}\r\n\r\nexport const addPost = post => ({\r\n    type: ActionTypes.ADD_POST,\r\n    payload: post\r\n});\r\n\r\nexport const fetchAddPost = (userId, title, body) => dispatch => {\r\n    const newPost = {\r\n        title: title,\r\n        body: body,\r\n        userId: userId\r\n    }\r\n\r\n    return fetch(`${urlAPI}/posts`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(newPost),\r\n        headers: {\r\n          'Content-type': 'application/json; charset=UTF-8',\r\n        },\r\n      })\r\n        .then(response => {\r\n            if(response.ok){\r\n                return response;\r\n            }\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            dispatch(addPost(response))\r\n        })\r\n        .catch(error => { \r\n            console.log('Create Post: ', error.message);\r\n            alert('Cannot create post')\r\n        })\r\n}\r\n\r\n//Comments actions\r\nexport const loadComments = comments => ({\r\n    type: ActionTypes.LOAD_COMMENTS,\r\n    payload: comments\r\n});\r\n\r\nexport const commentsFailed = error => ({\r\n    type: ActionTypes.COMMENTS_FAILED,\r\n    payload: error\r\n});\r\n\r\nexport const fetchComments = id => dispatch =>{\r\n    return fetch(`${urlAPI}/comments?postId=${id}`)\r\n        .then(response => {\r\n            if(response.ok) return response;\r\n            else{\r\n                var error = new Error('Error' + response.status + ': '+ response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        },\r\n        error => {\r\n            var errorMessage = new Error(error.errorMessage);\r\n            throw errorMessage;\r\n        })\r\n        .then(response => response.json())\r\n        .then(comments => dispatch(loadComments(comments)))\r\n        .catch(error => dispatch(commentsFailed(error.message)))\r\n}","import { Button } from 'reactstrap';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SingleUserComponent = props => {\r\n    const websiteUrl = `https://${props.user.website}`;\r\n    const pathUrl = `/users/${props.user.id}/posts`\r\n    return(\r\n        <div className=\"user\">\r\n            <h5 className=\"username\">{props.user.username}</h5>\r\n            <p className=\"name\">{props.user.name}</p>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm\">\r\n                    <div>Email: {props.user.email}</div>\r\n                    <div>City: {props.user.address.city}</div>\r\n                </div>\r\n                <div className=\"col-sm\">\r\n                    <div>Phone: {props.user.phone}</div>\r\n                    <div>WebSite: <a href={websiteUrl}>{props.user.website}</a></div>\r\n                </div>\r\n                <div className=\"col-sm d-flex justify-content-center\">\r\n                    <Link to={pathUrl}>\r\n                        <Button className outline color=\"primary\">Posts</Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleUserComponent;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { fetchUsers } from '../../redux/ActionCreators';\r\nimport SingleUserComponent from './SingleUserComponent';\r\n\r\n//function that passes state from store to props\r\nconst mapStateToProps = state => {\r\n    return{\r\n        users: state.users\r\n    }\r\n}\r\n\r\n//Function that allows us to call actions to form state \r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchUsers: () => dispatch(fetchUsers())\r\n})\r\n\r\nconst UsersComponent = (props) => {\r\n\r\n    //Hook that executes only once after page is rendered to fetch Users, equivalent to componentDidMount\r\n    useEffect(() => {\r\n        props.fetchUsers();\r\n    }, [])\r\n\r\n    //Maps through users array\r\n    const allUsers = props.users.users.map(el => {\r\n        return(\r\n            <SingleUserComponent key={el.id} user={el}/>\r\n        )\r\n    })\r\n\r\n    //Renders all users if they exist, otherwise renders error\r\n    const RenderUsers = () => {\r\n        if(props.users.errorMessage){\r\n            return <h2>{props.users.errorMessage}</h2>\r\n        }\r\n        else{\r\n            return <div>{allUsers}</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2 className=\"users-header\">Users</h2>\r\n            <RenderUsers/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UsersComponent));\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row } from 'reactstrap'\r\n\r\nconst SinglePostComponent = props => {\r\n    const pathUrl = `/users/${props.post.userId}/posts/${props.post.id}`;\r\n    return(\r\n        <div className=\"post\">\r\n            <Row>\r\n                <h2 className=\"col-sm-10\">{props.post.title}</h2>\r\n                <div className=\" col-sm-2\">\r\n                    <Link to={pathUrl}>\r\n                        <Button color=\"secondary\">Details</Button>\r\n                    </Link>\r\n                </div>\r\n            </Row>\r\n            <p>{props.post.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SinglePostComponent;","import React from 'react'\r\n\r\nconst DetailedUserComponent = props => {\r\n    if(props.user.user){\r\n    const websiteUrl = `https://${props.user.user.website}`;\r\n        return(\r\n            <div className=\"detailed-user\">\r\n                <h3 className=\"detailed-user-name\">{props.user.user.name}</h3>\r\n                <div className=\"detailed-user-body\">\r\n                    <h6>@{props.user.user.username}</h6>\r\n                    <div>Email: {props.user.user.email}</div>\r\n                    <div>Phone: {props.user.user.phone}</div>\r\n                    <div>City: {props.user.user.address.city}</div>\r\n                    <div>Street: {props.user.user.address.street}</div>\r\n                    <div>WorkPlace: {props.user.user.company.name}</div>\r\n                    <div>WebSite: <a href={websiteUrl}>{props.user.user.website}</a></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return <h4>Loading...</h4>\r\n    }\r\n}\r\n\r\nexport default DetailedUserComponent;","import React, { useEffect, useState } from 'react';\r\nimport { Button, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { fetchAddPost, fetchPosts, fetchSingleUser } from '../../redux/ActionCreators';\r\nimport SinglePostComponent from './SInglePostComponent';\r\nimport DetailedUserComponent from './DetailedUserComponent';\r\nimport { Control, LocalForm } from 'react-redux-form';\r\n\r\n//function that passes state from store to props\r\nconst mapStateToProps = state => {\r\n    return {\r\n        posts: state.posts,\r\n        user: state.singleUser\r\n    }\r\n}\r\n\r\n//Function that allows us to call actions to form state \r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchPosts: (id) => dispatch(fetchPosts(id)),\r\n    fetchSingleUser: (id) => dispatch(fetchSingleUser(id)),\r\n    addPost: (userId, title, body) => dispatch(fetchAddPost(userId, title, body))\r\n})\r\n\r\nconst Posts = props => {\r\n    \r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    //Function for toggling popup for creating post\r\n    const toogleModal = () => {\r\n        setIsModalOpen(prev => !prev)\r\n    }\r\n\r\n    //Function for creating post after clicking on Submit\r\n    const handleSubmit = values => {\r\n        toogleModal();\r\n        props.addPost(props.user.user.id, values.header, values.body)\r\n    }\r\n\r\n    //Hook that executes only once after page is rendered to fetch Posts and Single User, equivalent to componentDidMount\r\n    useEffect(() => {\r\n        props.fetchPosts(props.match.params.userId);\r\n        props.fetchSingleUser(props.match.params.userId)\r\n    }, []);\r\n\r\n    //Maps through posts array\r\n    const allPosts = props.posts.posts.map(el => {\r\n        return(\r\n            <SinglePostComponent key={el.id} post={el}/>\r\n        )\r\n    })\r\n\r\n    //Renders all posts if they exist, otherwise renders error\r\n    const RenderPosts = () => {\r\n        if(props.posts.errorMessage){\r\n            return <h2>{props.posts.errorMessage}</h2>\r\n        }\r\n        else{\r\n            return(\r\n                <div>{allPosts}</div>\r\n            )\r\n        }\r\n    }\r\n\r\n    //Renders detailed post if it exists, otherwise renders error\r\n    const RenderDetailedUser = () => {\r\n        if(props.user.errorMessage){\r\n            return <h2>{props.user.errorMessage}</h2>\r\n        }\r\n        else{\r\n            return <DetailedUserComponent user={props.user}/>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <RenderDetailedUser/>\r\n            <Row>\r\n                <div className=\"col-sm-2\">\r\n                    <h4>Posts</h4>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                    <Button onClick={toogleModal} color=\"success\">+Add New!</Button>\r\n                </div>\r\n            </Row>\r\n            <Modal isOpen={isModalOpen} toggle={toogleModal}>\r\n                <ModalHeader toggle={toogleModal}>Add New Post</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                        <div className=\"container\">\r\n                            <Row className=\"form-group\">\r\n                                <Label>Header</Label>\r\n                                <Control.text\r\n                                className=\"form-control\"\r\n                                model=\".header\"\r\n                                name=\"header\"\r\n                                id=\"header\"\r\n                                placeholder=\"Header\"/>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<Label htmlFor=\"body\">Body</Label>\r\n\t\t\t\t\t\t\t\t<Control.textarea className=\"form-control\"\r\n\t\t\t\t\t\t\t\tmodel=\".body\"\r\n\t\t\t\t\t\t\t\tname=\"body\"\r\n\t\t\t\t\t\t\t\tid=\"body\"\r\n\t\t\t\t\t\t\t\trows=\"6\"/>\r\n\t\t\t\t\t\t\t</Row>\r\n                            <Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<Button type=\"submit\" color=\"success\">Submit</Button>\r\n\t\t\t\t\t\t\t</Row>\r\n                        </div>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal>\r\n            <RenderPosts/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Posts));","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle, Row } from 'reactstrap';\r\n\r\nconst DetailedPostComponent = props => {\r\n\r\n    const [dropdownOpen, setOpen] = useState(false);\r\n\r\n    //Function for toggling dropdown buttons\r\n    const toggle = () => setOpen(!dropdownOpen);\r\n\r\n    //Path to previous page after post is deleted\r\n    const urlPath = `/users/${props.post.userId}/posts`;\r\n    \r\n    return(\r\n        <div className=\"detailed-post col-lg-8\">\r\n            <Row>\r\n                <h2 className=\"col-sm-10\">{props.post.title}</h2>\r\n                <div className=\"col-sm-2\">\r\n                    <ButtonDropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                        <DropdownToggle caret>\r\n                            <i class=\"fa fa-lg fa-ellipsis-v\"></i>\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem onClick={props.toggleModalEdit}>\r\n                                <Button color=\"secondary\">Edit</Button>\r\n                            </DropdownItem>\r\n                            <DropdownItem onClick={props.deletePost}>\r\n                                <Link to={urlPath}><Button outline color=\"danger\">Delete</Button></Link>\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </ButtonDropdown>\r\n                </div>\r\n            </Row>\r\n            <p className=\"detailed-post-body\">{props.post.body}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailedPostComponent;","import React from 'react';\r\n\r\nconst SingleCommentComponent = props => {\r\n    return(\r\n        <div className=\"comment\">\r\n            <h4 className=\"comment-name\">{props.comment.name}</h4>\r\n            <div className=\"comment-body\">\r\n                <div>{props.comment.email}</div>\r\n                <div>{props.comment.body}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SingleCommentComponent;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Control, LocalForm } from 'react-redux-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Button, Label, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\r\nimport { fetchComments, fetchDeletePost, fetchSinglePost, fetchUpdatePost } from '../../redux/ActionCreators';\r\nimport DetailedPostComponent from './DetailedPostComponent';\r\nimport SingleCommentComponent from './SIngleCommentComponent';\r\n\r\n//function that passes state from store to props\r\nconst mapStateToProps = state => {\r\n    return{\r\n        comments: state.comments,\r\n        post: state.singlePost\r\n    }\r\n}\r\n\r\n//Function that allows us to call actions to form state \r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchComments: (id) => dispatch(fetchComments(id)),\r\n    fetchSinglePost: (id) => dispatch(fetchSinglePost(id)),\r\n    fetchUpdatePost: (id, userId, title, body) => dispatch(fetchUpdatePost(id, userId, title, body)),\r\n    fetchDeletePost: (id, userId) => dispatch(fetchDeletePost(id, userId))\r\n})\r\n\r\nconst Post = props => {\r\n\r\n    const [currentPost, setCurrentPost] = useState({\r\n        id: null,\r\n        userId: null,\r\n        title: null,\r\n        body: null\r\n    })\r\n\r\n    const [modalEdit, setModalEdit] = useState(false);\r\n\r\n    //Hook that executes only once after page is rendered to fetch Comments and Single Post, equivalent to componentDidMount\r\n    useEffect(() => {\r\n        props.fetchComments(props.match.params.postId);\r\n        props.fetchSinglePost(props.match.params.postId)\r\n    }, [])\r\n\r\n    //Function for toggling popup for editing post\r\n    const toggleModalEdit = (elem) => {\r\n        setModalEdit(prev => !prev);\r\n        if(elem){\r\n            setCurrentPost(prev => {\r\n                return{...prev, id: elem.id, title: elem.title, body: elem.body, userId: elem.userId}\r\n            })\r\n        }\r\n    }\r\n\r\n    //Function for updating post after editing on clicking Submit\r\n    const handleSubmit = () => {\r\n        toggleModalEdit()\r\n        props.fetchUpdatePost(currentPost.id, currentPost.userId, currentPost.title, currentPost.body)\r\n    }\r\n\r\n    //Function that invokes after changing value of input Title for editing Post\r\n    const changeInputTitle = (event) => {\r\n        setCurrentPost(prev => {\r\n            return{...prev, title: event.target.value}\r\n        })\r\n    }\r\n\r\n    //Function that invokes after changing value of input Body for editing Post\r\n    const changeInputBody = (event) => {\r\n        setCurrentPost(prev => {\r\n            return{...prev, body: event.target.value}\r\n        })\r\n    }\r\n\r\n    //Function that calls fetchDeletePost() from props to delete Post\r\n    const deletePostHandler = (elem) => {\r\n        props.fetchDeletePost(elem.id, elem.userId)\r\n    }\r\n\r\n    //Maps through comments array\r\n    const allComments = props.comments.comments.map(el => {\r\n        return(\r\n            <SingleCommentComponent key={el.id} comment={el}/>\r\n        )\r\n    })\r\n\r\n    //Renders all comments if they exist, otherwise renders error\r\n    const RenderComments = () => {\r\n        if(props.comments.errorMessage){\r\n            return (\r\n                <h2>{props.comments.errorMessage}</h2>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div>{allComments}</div>\r\n            )\r\n        }\r\n    }\r\n    \r\n    //Renders detailed post\r\n    const RenderDetailedPost = () => {\r\n        if(props.post.post) {\r\n            return <DetailedPostComponent deletePost={() => deletePostHandler(props.post.post)} toggleModalEdit={() => toggleModalEdit(props.post.post)} post={props.post.post}/>\r\n        }\r\n        else{\r\n            return <div>Loading..</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Post</h2>\r\n            <RenderDetailedPost/>\r\n            <Modal isOpen={modalEdit} toggle={toggleModalEdit}>\r\n                <ModalHeader toggle={toggleModalEdit}>Edit Comment</ModalHeader>\r\n                <ModalBody>\r\n                    <LocalForm onSubmit={(values) => handleSubmit(values)}>\r\n                        <div className=\"container\">\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"title\">Title</Label>\r\n                                <Control.text\r\n                                className=\"form-control\"\r\n                                model=\".title\"\r\n                                name=\"title\"\r\n                                id=\"title\"\r\n                                value={currentPost.title}\r\n                                onChange={changeInputTitle}/>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<Label htmlFor=\"text\">Text</Label>\r\n\t\t\t\t\t\t\t\t<Control.textarea className=\"form-control\"\r\n\t\t\t\t\t\t\t\tmodel=\".text\"\r\n\t\t\t\t\t\t\t\tname=\"text\"\r\n\t\t\t\t\t\t\t\tid=\"text\"\r\n                                value={currentPost.body}\r\n                                onChange={changeInputBody}\r\n                                rows=\"5\"/>\r\n\t\t\t\t\t\t\t</Row>\r\n                            <Row className=\"form-group\">\r\n\t\t\t\t\t\t\t\t<Button type=\"submit\" color=\"success\">Submit</Button>\r\n\t\t\t\t\t\t\t</Row>\r\n                        </div>\r\n                    </LocalForm>\r\n                </ModalBody>\r\n            </Modal>\r\n            <div>\r\n                <div className=\"\">\r\n                    <h4>Comments</h4>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <RenderComments/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Post));","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UsersComponent from './users/Users';\r\nimport Posts from './posts/Posts';\r\nimport Post from './post/Post';\r\n\r\nconst MainComponent = () =>{\r\n   \r\n    const PostsComponent = () => <Posts/>\r\n\r\n    const PostComponent = () => <Post/>\r\n\r\n    return(\r\n        <Switch>\r\n            <Route exact path=\"/users\">\r\n                <UsersComponent />\r\n            </Route>\r\n            <Route exact path=\"/users/:userId/posts\" component={PostsComponent}/>\r\n            <Route exact path=\"/users/:userId/posts/:postId\" component={PostComponent}/>\r\n            <Redirect to=\"/users\"/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default MainComponent;","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const Posts = (state = {\r\n        posts: [],\r\n        errorMessage: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_POSTS:\r\n            return {...state, errorMessage: null, posts: action.payload}\r\n        case ActionTypes.POSTS_FAILED:\r\n            return{...state, errorMessage: action.payload, posts: []}\r\n        case ActionTypes.ADD_POST:\r\n            var post = action.payload;\r\n            return {...state, posts: state.posts.concat(post)};\r\n        default:\r\n            return state\r\n    }\r\n}","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const Users = (state = {\r\n        users: [],\r\n        errorMessage: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_USERS:\r\n            return {...state, errorMessage: null, users: action.payload}\r\n        case ActionTypes.USERS_FAILED:\r\n            return{...state, errorMessage: action.payload, users: []}\r\n        default:\r\n            return state\r\n    }\r\n}","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const Comments = (state = {\r\n        comments: [],\r\n        errorMessage: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_COMMENTS:\r\n            return {...state, errorMessage: null, comments: action.payload}\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return{...state, errorMessage: action.payload, comments: []}\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const SingleUser = (state = {\r\n        user: null,\r\n        errorMessage: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_SINGLE_USER:\r\n            return {...state, errorMessage: null, user: action.payload}\r\n        case ActionTypes.SINGLE_USER_FAILED:\r\n            return{...state, errorMessage: action.payload, user: null}\r\n        default:\r\n            return state\r\n    }\r\n}","import * as ActionTypes from '../ActionTypes';\r\n\r\nexport const SinglePost = (state = {\r\n        post: null,\r\n        errorMessage: null\r\n    }, action) => {\r\n    switch(action.type){\r\n        case ActionTypes.LOAD_SINGLE_POST:\r\n            return {...state, errorMessage: null, post: action.payload}\r\n        case ActionTypes.SINGLE_POST_FAILED:\r\n            return{...state, errorMessage: action.payload, post: null}\r\n        default:\r\n            return state\r\n    }\r\n}","import { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div className=\"App\">\n          <MainComponent/>\n        </div>\n      </BrowserRouter>\n    </Provider>\n    \n  );\n}\n\nexport default App;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { Posts } from './reducers/posts';\r\nimport { Users } from './reducers/users';\r\nimport { Comments } from './reducers/comments'\r\nimport { SingleUser } from './reducers/singleUser';\r\nimport { SinglePost } from './reducers/singlePost'\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            users: Users,\r\n            posts: Posts,\r\n            comments: Comments,\r\n            singleUser: SingleUser,\r\n            singlePost: SinglePost\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    )\r\n\r\n    return store;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}